{
    "accessoryFiles": {},
    "language": "WDL_1_0",
    "outputs": {
        "downSample.downSampleMetrics": "optional-file-with-labels",
        "downSample.downSampledBai": "optional-file-with-labels",
        "downSample.downSampledBam": "optional-file-with-labels",
        "downSample.downSampledFastq1": "optional-file-with-labels",
        "downSample.downSampledFastq2": "optional-file-with-labels"
    },
    "parameters": {
        "downSample.checkCoverage": {
            "inner": "boolean",
            "is": "optional"
        },
        "downSample.createIndex": {
            "inner": "boolean",
            "is": "optional"
        },
        "downSample.doSorting": {
            "inner": "boolean",
            "is": "optional"
        },
        "downSample.downSampleBam.memory": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleBam.threads": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleBam.timeout": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleFastq.memory": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleFastq.modules": {
            "inner": "string",
            "is": "optional"
        },
        "downSample.downSampleFastq.threads": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleFastq.timeout": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleMethod": "string",
        "downSample.downSampleRatio": {
            "inner": "floating",
            "is": "optional"
        },
        "downSample.downSampleReads": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.downSampleTool": "string",
        "downSample.inputBam": {
            "inner": {
                "fields": {
                    "bam": "file",
                    "bamIndex": "file"
                },
                "is": "object"
            },
            "is": "optional"
        },
        "downSample.inputFastq": {
            "inner": {
                "fields": {
                    "fastq1": "file",
                    "fastq2": "file"
                },
                "is": "object"
            },
            "is": "optional"
        },
        "downSample.outputFileNamePrefix": "string",
        "downSample.randomSampleSeed": {
            "inner": "integer",
            "is": "optional"
        },
        "downSample.reference": "string"
    },
    "workflow": "version 1.0\n\nstruct fastqPair {\n    File fastq1\n    File fastq2\n}\n\nstruct bamFile {\n  File bam\n  File bamIndex\n}\n\nworkflow downSample {\n    input {\n        fastqPair? inputFastq\n        bamFile? inputBam\n        String reference\n        String outputFileNamePrefix\n        String downSampleTool\n        String downSampleMethod\n        Float? downSampleRatio\n        Int? downSampleReads\n        Int? randomSampleSeed\n        Boolean doSorting = true\n        Boolean createIndex = true\n        Boolean checkCoverage = false\n    }\n    parameter_meta {\n        inputFastq: \"the input fastq file pair\"\n        inputBam: \"the input bam and index\"\n        refFasta: \"Path to human genome FASTA reference\"\n        outputFileNamePrefix: \"Prefix of output file name\"\n        downSampleTool: \"the tool to be used in downsampling, a few options available\"\n        downSampleMethod: \"choose between random/top_reads\"\n        downSampleRatio: \"given a ratio for downsampled reads\"\n        downSampleReads: \"given a number of reads after down sample\"\n        randomSampleSeed: \"the seed for random sampling\"\n        doSorting: \"whether do sorting after downsample for bam file\"\n        createIndex: \"whether create index for downsampled bam\"\n        checkCoverage: \"whether check coverage for downsampled bam\"\n    }\n    Map[String,String] downsample_modules_by_genome = { \n    \"hg19\": \"hg19/p13 samtools/1.16.1 picard/3.1.0 hg38-bwa-index-with-alt/0.7.12\",\n    \"hg38\": \"hg38/p12 samtools/1.16.1 picard/3.1.0 hg38-bwa-index-with-alt/0.7.12\"\n    }\n\n    Map[String,String] downsampleRef_by_genome = { \n    \"hg19\": \"$HG19_ROOT/hg19_random.fa\",\n    \"hg38\": \"$HG38_ROOT/hg38_random.fa\"\n    }\n\n    if ( defined (inputFastq) ) {\n        call downSampleFastq {\n            input:\n                fastq1 = select_first([inputFastq]).fastq1,\n                fastq2 = select_first([inputFastq]).fastq2,\n                outputFileNamePrefix = outputFileNamePrefix,\n                downSampleTool = downSampleTool,\n                downSampleMethod = downSampleMethod,\n                randomSampleSeed = select_first([randomSampleSeed, 0]),\n                downSampleRatio = select_first([downSampleRatio, 0]),\n                downSampleReads = select_first([downSampleReads, 0])\n        }\n    }\n    if  ( defined (inputBam)) {\n        call downSampleBam {\n            input:\n                bam = select_first([inputBam]).bam,\n                bai = select_first([inputBam]).bamIndex,\n                downSampleTool = downSampleTool,\n                outputFileNamePrefix = outputFileNamePrefix,\n                downSampleMethod = downSampleMethod,\n                randomSampleSeed = select_first([randomSampleSeed, 0]),\n                downSampleRatio = select_first([downSampleRatio, 0]),\n                downSampleReads = select_first([downSampleReads, 0]),\n                doSorting = doSorting,\n                createIndex = createIndex,\n                checkCoverage = checkCoverage,\n                refFasta = downsampleRef_by_genome[reference],\n                modules = downsample_modules_by_genome[reference]\n        }\n    }\n    File? downSample_Metrics = if (defined(inputBam)) then downSampleBam.downSampleMetrics else downSampleFastq.downSampleMetrics\n\n    meta {\n        author: \"Gavin Peng\"\n        email: \"gpeng@oicr.on.ca\"\n        description: \"Workflow to downsample fastq or bam files. Can use a combination of differrent method, tools and parameters. Notes: 1) downsample method can choose between random and top_reads, the later can only applied to fastq inputs; 2) fastq downsample tools include seqtk, seqkit; bam downsample tools include samtools, picard; 3) for seqkit, samtools, picard, prefered parameter is downSampleRatio, as use downSampleReads resulting number of reads is not exact, and may include extra compute time. There is option for coverage check for dowm sampled bam file, assuming input is WGS data, for TS library, the resulting bam coverage evaluation needs bed file (not included in this wdl as TS down sampling need is rare)\"\n        dependencies: [\n        {\n            name: \"seqtk/1.3\",\n            url: \"https://github.com/lh3/seqtk\"\n        },\n        {\n            name: \"seqkit/2.3.1\",\n            url: \"https://github.com/shenwei356/seqkit\"\n        },\n        {\n            name: \"picard/3.1.0\",\n            url: \"https://broadinstitute.github.io/picard/\"\n        },\n        { \n          name: \"samtools/1.16.1\",\n          url: \"https://github.com/samtools/samtools/releases/\"\n        }\n      ]\n      output_meta: {\n        downSampledFastq1: {\n            description: \"Output downsampled fastq read1\",\n            vidarr_label: \"downSampledFastq1\"\n        },\n        downSampledFastq2: {\n            description: \"Output downsampled fastq read2\",\n            vidarr_label: \"downSampledFastq1\"\n        },\n        downSampledBam: {\n            description: \"Downsampled bam file\",\n            vidarr_label: \"downSampledBam\"\n        },\n        downSampledBai: {\n            description: \"Downsampled bam file index\",\n            vidarr_label: \"downSampledBai\"\n        },\n        downSampleMetrics: {\n            description: \"The metrics of downSampled output\",\n            vidarr_label: \"downSampleMetrics\"\n        }\n      }\n    }\n    output {\n        Pair[File, Map[String,String]]? downSampledFastq1 = if defined(downSampleFastq.downSampledFastq1) then (select_first([downSampleFastq.downSampledFastq1]), {\"vidarr_label\": \"downSampledFastq1\"}) else empty_optional_pair\n        Pair[File, Map[String,String]]? downSampledFastq2 = if defined(downSampleFastq.downSampledFastq2) then (select_first([downSampleFastq.downSampledFastq2]), {\"vidarr_label\": \"downSampledFastq1\"}) else empty_optional_pair\n        Pair[File, Map[String,String]]? downSampledBam = if defined(downSampleBam.downSampledBam) then (select_first([downSampleBam.downSampledBam]), {\"vidarr_label\": \"downSampledBam\"}) else empty_optional_pair\n        Pair[File, Map[String,String]]? downSampledBai = if defined(downSampleBam.downSampledBai) then (select_first([downSampleBam.downSampledBai]), {\"vidarr_label\": \"downSampledBai\"}) else empty_optional_pair\n        Pair[File, Map[String,String]]? downSampleMetrics = if defined(downSample_Metrics) then (select_first([downSample_Metrics]), {\"vidarr_label\": \"downSampleMetrics\"}) else empty_optional_pair\n    }\nif (false) { Pair[File, Map[String,String]] empty_optional_pair = (\"\",{}) }\n} \n\ntask downSampleFastq {\n    input {\n        File fastq1\n        File fastq2\n        String outputFileNamePrefix\n        String downSampleTool\n        String downSampleMethod\n        Float downSampleRatio\n        Int downSampleReads\n        Int randomSampleSeed\n        Int timeout = 12\n        Int memory = 24\n        Int threads = 8\n        String modules = \"seqtk/1.3 seqkit/2.3.1\"\n    }\n\n    parameter_meta {\n        fastq1: \"input fastq read1\"\n        fastq2: \"input fastq read2\"\n        outputFileNamePrefix: \"Prefix of output file name\"\n        downSampleTool: \"the tool to be used in downsampling, a few options available\"\n        downSampleMethod: \"choose between random/top_reads\"\n        downSampleRatio: \"given a ratio for downsampled reads\"\n        downSampleReads: \"given a number of reads after down sample\"\n        randomSampleSeed: \"the seed for random sampling\"\n        timeout: \"The hours until the task is killed\"\n        memory: \"The GB of memory provided to the task\"\n        threads: \"The number of threads the task has access to\"\n        modules: \"The modules that will be loaded\"\n    }\n    String output_suffix = if (sub(basename(fastq1), \".*\\\\.gz$\", \"\") != basename(fastq1)) then \"fastq.gz\" else \"fastq\"\n\n    command <<<\n        valid_downSampleTool=(\"seqtk\" \"seqkit\" \"\")\n        valid_downSampleMethod=(\"random\" \"top_reads\")\n\n        is_valid=false\n\n        for tool in \"${valid_downSampleTool[@]}\"; do\n            if [ \"$tool\" = \"~{downSampleTool}\" ]; then\n                is_valid=true\n                break\n            fi\n        done\n\n        if [ \"$is_valid\" = false ]; then\n            echo \"ERROR: Invalid downSampleTool: ~{downSampleTool}\" >&2\n            exit 1\n        fi\n        if [[ ! \" ${valid_downSampleMethod[@]} \" =~  ~{downSampleMethod} ]]; then\n            echo \"valid downSampleMethod values are random or top_reads\" >&2\n            exit 1\n        fi\n        if [ ~{randomSampleSeed} != 0 ]; then\n                seed=~{randomSampleSeed}\n            else\n                seed=42\n        fi\n\n        if [ ~{downSampleMethod} = \"top_reads\" ]; then\n            if [ ~{downSampleReads} -ne 0 ]; then\n                if [[ ~{output_suffix} == \"fastq\" ]]; then \n                    head -n $((4 * ~{downSampleReads}))   ~{fastq1}  > ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix}\n                    head -n $((4 * ~{downSampleReads}))   ~{fastq2}  > ~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\n                else\n                    zcat ~{fastq1} | head -n $((4 * ~{downSampleReads})) | gzip  > ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix}\n                    zcat ~{fastq2} | head -n $((4 * ~{downSampleReads})) | gzip  > ~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\n                fi               \n                echo \"FINAL_READS=~{downSampleReads}\" > ~{outputFileNamePrefix}.downSample.metrics\n            else \n                echo \"when downSampleMethod is top_reads, downSampleReads needs provided\" >&2\n                exit 1\n            fi\n\n        elif [ ~{downSampleTool} = \"seqtk\" ]; then\n            #if both downSampleReads and downSampleRatio provided then will use downSampleReads\n            if [ ~{downSampleReads} != 0 ]; then\n                downSampleFactor=~{downSampleReads}\n            elif (( $(echo \"~{downSampleRatio} != 0\" | bc -l) )); then\n                downSampleFactor=~{downSampleRatio}\n            else\n                echo \"downSampleReads or downSampleRatio need provided\" >&2\n                exit 1\n            fi\n\n            if [[ ~{output_suffix} == \"fastq\" ]]; then \n                seqtk sample -s${seed} ~{fastq1} ${downSampleFactor} > ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix} \n                echo \"FINAL_READS=$(cat ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix} | awk '{c++} END {print c/4}')\" > ~{outputFileNamePrefix}.downSample.metrics\n                seqtk sample -s${seed} ~{fastq2} ${downSampleFactor} > ~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\n            else\n                seqtk sample -s${seed} ~{fastq1} ${downSampleFactor} | gzip > ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix} \n                echo \"FINAL_READS=$(zcat ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix} | awk '{c++} END {print c/4}')\" >  ~{outputFileNamePrefix}.downSample.metrics\n                seqtk sample -s${seed} ~{fastq2} ${downSampleFactor} | gzip > ~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\n            fi\n\n        elif [ ~{downSampleTool} = \"seqkit\" ]; then\n            #if both downSampleReads and downSampleRatio provided then will use downSampleRatio\n            if (( $(echo \"~{downSampleRatio} != 0\" | bc -l) )); then\n                seqkit sample ~{fastq1} -p ~{downSampleRatio} -s ${seed} -2 -o ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix} 2>&1 | tee ~{outputFileNamePrefix}.downSample.metrics | grep -o \"[0-9]* sequences outputted\" | awk '{print \"FINAL_READS=\"$1}' >> ~{outputFileNamePrefix}.downSample.metrics\n                seqkit sample ~{fastq2} -p ~{downSampleRatio} -s ${seed} -2 -o ~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\n\n            elif [ ~{downSampleReads} -ne 0 ]; then\n                seqkit sample -p 0.2 ~{fastq1} -s ${seed} | seqkit head -n ~{downSampleReads} -o ~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix} \n                seqkit sample -p 0.2 ~{fastq2} -s ${seed} | seqkit head -n ~{downSampleReads} -o ~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\n                echo \"FINAL_READS=~{downSampleReads}\" > ~{outputFileNamePrefix}.downSample.metrics\n            else\n                echo \"downSampleReads or downSampleRatio need provided\" >&2\n                exit 1\n            fi\n        fi\n    >>>\n\n    output {\n        File? downSampledFastq1 = \"~{outputFileNamePrefix}.downSampledFastq1.~{output_suffix}\"\n        File? downSampledFastq2 = \"~{outputFileNamePrefix}.downSampledFastq2.~{output_suffix}\"\n        File? downSampleMetrics = \"~{outputFileNamePrefix}.downSample.metrics\"\n    }\n\n    runtime {\n        modules: \"~{modules}\"\n        memory:  \"~{memory} GB\"\n        cpu:     \"~{threads}\"\n        timeout: \"~{timeout}\"\n    }\n}\n\ntask downSampleBam {\n    input {\n        File bam\n        File bai\n        String? refFasta\n        String outputFileNamePrefix\n        String downSampleTool\n        String downSampleMethod\n        Float downSampleRatio\n        Int downSampleReads\n        Int randomSampleSeed\n        Boolean doSorting = true\n        Boolean createIndex = true\n        Boolean checkCoverage = false\n        Int timeout = 12\n        Int memory = 24\n        Int threads = 8\n        String modules\n    }\n\n    parameter_meta {\n        bam: \"the input bam file\"\n        bai: \"the input bam index\"\n        refFasta: \"Path to human genome FASTA reference\"\n        outputFileNamePrefix: \"Prefix of output file name\"\n        downSampleTool: \"the tool to be used in downsampling, a few options available\"\n        downSampleMethod: \"choose between random/top_reads\"\n        downSampleRatio: \"given a ratio for downsampled reads\"\n        downSampleReads: \"given a number of reads after down sample, because of probabilistic sampling, the reads number is not exact\"\n        randomSampleSeed: \"the seed for random sampling\"\n        timeout: \"The hours until the task is killed\"\n        memory: \"The GB of memory provided to the task\"\n        threads: \"The number of threads the task has access to\"\n        modules: \"The modules that will be loaded\"\n        doSorting: \"whether do sorting after downsample for bam file, must set to true if creatIndex set to true\"\n        createIndex: \"whether create index for downsampled bam\"\n        checkCoverage: \"whether check coverage for downsampled bam\"\n    }\n\n    command <<<\n        set -euo pipefail\n        valid_downSampleTool=(\"samtools\", \"picard\")\n        if [[ ! \" ${valid_downSampleTool[@]} \" =~  ~{downSampleTool} ]]; then\n            echo \"valid downSampleTool values are samtools or picard for bam dowmsampling\" >&2\n            exit 1\n        fi\n        if [[ ~{downSampleMethod} != \"random\" ]]; then\n            echo \"valid downSampleMethod for bam downsampling is random\" >&2\n            exit 1\n        fi\n        if [ ~{randomSampleSeed} != 0 ]; then\n                seed=~{randomSampleSeed}\n            else\n                seed=42\n        fi\n        \n        if [ ~{downSampleTool} = \"samtools\" ]; then\n            #if both downSampleReads and downSampleRatio provided then will use downSampleRatio\n            if (( $(echo \"~{downSampleRatio} != 0\" | bc -l) )); then\n                downSampleFactor=~{downSampleRatio}\n            elif [ ~{downSampleReads} != 0 ]; then\n                TOTAL_READS=$(samtools view -c ~{bam})\n                downSampleFactor=$(echo \"scale=6; ~{downSampleReads} / $TOTAL_READS\" | bc)\n            else\n                echo \"downSampleReads or downSampleRatio need provided\" >&2\n                exit 1\n            fi\n            samtools view -s ${downSampleFactor} -b ~{bam} -o downsampled.bam\n            echo \"TOTAL_READS=$(samtools view -c downsampled.bam)\" > ~{outputFileNamePrefix}.downsample.metrics\n\n            if [ ~{doSorting} = true ]; then\n                samtools sort downsampled.bam -o ~{outputFileNamePrefix}.downsampled.bam\n            fi\n            if [ ~{createIndex} = true ]; then\n                samtools index ~{outputFileNamePrefix}.downsampled.bam\n            fi\n\n        elif [ ~{downSampleTool} = \"picard\" ]; then\n            #if both downSampleReads and downSampleRatio provided then will use downSampleRatio\n            if (( $(echo \"~{downSampleRatio} != 0\" | bc -l) )); then\n                downSampleFactor=~{downSampleRatio}\n            elif [ ~{downSampleReads} != 0 ]; then\n                TOTAL_READS=$(samtools view -c ~{bam})\n                downSampleFactor=$(echo \"scale=6; ~{downSampleReads} / $TOTAL_READS\" | bc)\n            else\n                echo \"downSampleReads or downSampleRatio need provided\" >&2\n                exit 1\n            fi\n            export JAVA_OPTS=\"-Xmx$(echo \"scale=0; ~{memory} * 0.8 / 1\" | bc)G\"\n            java -jar ${PICARD_ROOT}/picard.jar DownsampleSam \\\n            -I ~{bam} \\\n            -O downsampled.bam \\\n            -P ${downSampleFactor} \\\n            --RANDOM_SEED ${seed} \\\n            --CREATE_INDEX false \\\n            --VALIDATION_STRINGENCY SILENT \\\n            --METRICS_FILE ~{outputFileNamePrefix}.downsample.metrics\n\n            if [ ~{doSorting} = true ]; then\n                java -jar ${PICARD_ROOT}/picard.jar SortSam \\\n                -I downsampled.bam \\\n                -O ~{outputFileNamePrefix}.downsampled.bam \\\n                --SORT_ORDER coordinate\n            fi\n            if [ ~{createIndex} = true ]; then\n                java -jar ${PICARD_ROOT}/picard.jar BuildBamIndex \\\n                -I ~{outputFileNamePrefix}.downsampled.bam\n                mv ~{outputFileNamePrefix}.downsampled.bai ~{outputFileNamePrefix}.downsampled.bam.bai\n            fi\n        fi\n        if [ ~{checkCoverage} = true ]; then\n                java -jar ${PICARD_ROOT}/picard.jar CollectWgsMetrics \\\n                -I ~{outputFileNamePrefix}.downsampled.bam \\\n                -O coverage_metrics \\\n                -R ~{refFasta}\n\n            cat coverage_metrics >>  ~{outputFileNamePrefix}.downsample.metrics\n        fi\n    >>>\n\n    output {\n        File? downSampledBam = \"~{outputFileNamePrefix}.downsampled.bam\"\n        File? downSampledBai = \"~{outputFileNamePrefix}.downsampled.bam.bai\"\n        File? downSampleMetrics = \"~{outputFileNamePrefix}.downsample.metrics\"\n    }\n\n    runtime {\n        modules: \"~{modules}\"\n        memory:  \"~{memory} GB\"\n        cpu:     \"~{threads}\"\n        timeout: \"~{timeout}\"\n    }\n}"
}