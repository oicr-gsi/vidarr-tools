{
    "accessoryFiles": {},
    "language": "WDL_1_0",
    "outputs": {
        "crosscheckFingerprints.crosscheckMetrics": "file-with-labels",
        "crosscheckFingerprints.crosscheckMetricsMatrix": "file-with-labels"
    },
    "parameters": {
        "crosscheckFingerprints.haplotypeMapDir": {
            "inner": "string",
            "is": "optional"
        },
        "crosscheckFingerprints.haplotypeMapFileName": "string",
        "crosscheckFingerprints.inputs": {
            "inner": "file",
            "is": "list"
        },
        "crosscheckFingerprints.outputPrefix": {
            "inner": "string",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.crosscheckBy": {
            "inner": "string",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.exitCodeWhenMismatch": {
            "inner": "integer",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.exitCodeWhenNoValidChecks": {
            "inner": "integer",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.jobMemory": {
            "inner": {
                "inner": "integer",
                "is": "retry"
            },
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.lodThreshold": {
            "inner": "floating",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.modules": {
            "inner": "string",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.picardMaxMemMb": {
            "inner": {
                "inner": "integer",
                "is": "retry"
            },
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.threads": {
            "inner": "integer",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.timeout": {
            "inner": "integer",
            "is": "optional"
        },
        "crosscheckFingerprints.runCrosscheckFingerprints.validationStringency": {
            "inner": "string",
            "is": "optional"
        }
    },
    "workflow": "version 1.0\nworkflow crosscheckFingerprints {\n    input {\n        Array[File] inputs\n        String haplotypeMapFileName\n        String haplotypeMapDir = \"$CROSSCHECKFINGERPRINTS_HAPLOTYPE_MAP_ROOT\"\n        String outputPrefix = \"output\"\n    }\n    String haplotypeMap = \"~{haplotypeMapDir}/~{haplotypeMapFileName}\"\n\n    parameter_meta {\n        inputs: \"A list of SAM/BAM/VCF files to fingerprint.\"\n        haplotypeMapFileName: \"The file name that lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting.\"\n        haplotypeMapDir: \"The directory that contains haplotype map files. By default the modulator data directory.\"\n        outputPrefix: \"Text to prepend to all output.\"\n    }\n\n    meta {\n        author: \"Savo Lazic\"\n        email: \"savo.lazic@oicr.on.ca\"\n        description: \"Checks if all the genetic data within a set of files appear to come from the same individual by using Picard [CrosscheckFingerprints](https://gatk.broadinstitute.org/hc/en-us/articles/360037594711-CrosscheckFingerprints-Picard-)\"\n        dependencies:\n        [\n            {\n                name: \"picard/3.1.0\",\n                url: \"https://github.com/broadinstitute/picard/releases/tag/3.1.0\"\n            },\n            {\n                name: \"crosscheckfingerprints-haplotype-map/20230324\",\n                url: \"https://github.com/oicr-gsi/fingerprint_maps\"\n            }\n        ]\n    output_meta: {\n    crosscheckMetrics: {\n        description: \"The crosschecksMetrics file produced by Picard CrosscheckFingerprints\",\n        vidarr_label: \"crosscheckMetrics\"\n    },\n    crosscheckMetricsMatrix: {\n        description: \"Matrix of LOD scores. This is less informative than the metrics output and only contains Normal-Normal LOD score (i.e. doesn't account for Loss of Heterozygosity.\",\n        vidarr_label: \"crosscheckMetricsMatrix\"\n    }\n}\n    }\n\n\n    call runCrosscheckFingerprints {\n        input:\n            inputs = inputs,\n            haplotypeMap = haplotypeMap,\n            outputPrefix = outputPrefix\n    }\n\n    output {   Pair[File, Map[String, String]] crosscheckMetrics = (runCrosscheckFingerprints.crosscheckMetrics, {\"vidarr_label\": \"crosscheckMetrics\"})\n   Pair[File, Map[String, String]] crosscheckMetricsMatrix = (runCrosscheckFingerprints.crosscheckMetricsMatrix, {\"vidarr_label\": \"crosscheckMetricsMatrix\"})}\n}\n\ntask runCrosscheckFingerprints {\n    input {\n        Array[File] inputs\n        String haplotypeMap\n        String outputPrefix\n        String crosscheckBy = \"READGROUP\"\n        Int picardMaxMemMb = 3000\n        Int exitCodeWhenMismatch = 0\n        Int exitCodeWhenNoValidChecks = 0\n        Float lodThreshold = 0.0\n        String validationStringency = \"SILENT\"\n        String modules = \"picard/3.1.0 crosscheckfingerprints-haplotype-map/20230324\"\n        Int threads = 4\n        Int jobMemory = 6\n        Int timeout = 6\n    }\n    Array[String] inputCommand = prefix(\"INPUT=\", inputs)\n\n    parameter_meta {\n        inputs: \"A list of SAM/BAM/VCF files to fingerprint.\"\n        haplotypeMap: \"The file that lists a set of SNPs, optionally arranged in high-LD blocks, to be used for fingerprinting.\"\n        outputPrefix: \"Text to prepend to all output.\"\n        crosscheckBy: \"Specificies which data-type should be used as the basic comparison unit. Fingerprints from readgroups can be 'rolled-up' to the LIBRARY, SAMPLE, or FILE level before being compared. Fingerprints from VCF can be be compared by SAMPLE or FILE.\"\n        picardMaxMemMb: {\n            description: \"Passed to Java -Xmx (in Mb).\",\n            vidarr_retry: true\n        }\n        exitCodeWhenMismatch: \"When one or more mismatches between groups is detected, exit with this value instead of 0.\"\n        exitCodeWhenNoValidChecks: \"When all LOD score are zero, exit with this value.\"\n        lodThreshold: \"If any two groups (with the same sample name) match with a LOD score lower than the threshold the tool will exit with a non-zero code to indicate error. Program will also exit with an error if it finds two groups with different sample name that match with a LOD score greater than -LOD_THRESHOLD. LOD score 0 means equal likelihood that the groups match vs. come from different individuals, negative LOD score -N, mean 10^N time more likely that the groups are from different individuals, and +N means 10^N times more likely that the groups are from the same individual.\"\n        validationStringency: \"Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. See https://jira.oicr.on.ca/browse/GC-8372 for why this is set to SILENT for OICR purposes.\"\n        modules: \"Modules to load for this workflow.\"\n        threads: \"Requested CPU threads.\"\n        jobMemory: {\n            description: \"Memory (GB) allocated for this job.\",\n            vidarr_retry: true\n        }\n        timeout: \"Number of hours before task timeout.\"\n    }\n\n    command <<<\n        set -eu -o pipefail\n\n        java -Xmx~{picardMaxMemMb}M -jar $PICARD_ROOT/picard.jar CrosscheckFingerprints \\\n        ~{sep=\" \" inputCommand} \\\n        HAPLOTYPE_MAP=~{haplotypeMap} \\\n        OUTPUT=~{outputPrefix}.crosscheck_metrics.txt \\\n        MATRIX_OUTPUT=~{outputPrefix}.crosscheck_metrics.matrix \\\n        NUM_THREADS=~{threads} \\\n        EXIT_CODE_WHEN_MISMATCH=~{exitCodeWhenMismatch} \\\n        EXIT_CODE_WHEN_NO_VALID_CHECKS=~{exitCodeWhenNoValidChecks} \\\n        CROSSCHECK_BY=~{crosscheckBy} \\\n        LOD_THRESHOLD=~{lodThreshold} \\\n        VALIDATION_STRINGENCY=~{validationStringency}\n    >>>\n\n    output {\n        File crosscheckMetrics = \"~{outputPrefix}.crosscheck_metrics.txt\"\n        File crosscheckMetricsMatrix = \"~{outputPrefix}.crosscheck_metrics.matrix\"\n    }\n\n    meta {\n        output_meta: {\n            crosscheckMetrics: \"The crosschecksMetrics file produced by Picard CrosscheckFingerprints\",\n            crosscheckMetricsMatrix: \"Matrix of LOD scores. This is less informative than the metrics output and only contains Normal-Normal LOD score (i.e. doesn't account for Loss of Heterozygosity.\"\n        }\n    }\n\n    runtime {\n        modules: \"~{modules}\"\n        memory:  \"~{jobMemory} GB\"\n        cpu:     \"~{threads}\"\n        timeout: \"~{timeout}\"\n    }\n}\n"
}