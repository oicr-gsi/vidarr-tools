{
    "accessoryFiles": {},
    "language": "WDL_1_0",
    "outputs": {
        "empty.stderr": "file-with-labels",
        "empty.stdout": "file-with-labels"
    },
    "parameters": {
        "empty.dummyInput": "file",
        "empty.exitCode": {
            "inner": "integer",
            "is": "optional"
        },
        "empty.log.mem": {
            "inner": "integer",
            "is": "optional"
        },
        "empty.log.runtime_seconds": {
            "inner": "integer",
            "is": "optional"
        },
        "empty.log.timeout": {
            "inner": "integer",
            "is": "optional"
        },
        "empty.n": {
            "inner": "integer",
            "is": "optional"
        }
    },
    "workflow": "version 1.0\n\nworkflow empty {\n  input {\n    File dummyInput\n    Int exitCode = 0\n    Int n = 10\n  }\n  parameter_meta {\n    dummyInput: \"Unused input file, strictly for Vidarr regression testing.\"\n    exitCode: \"Exit code\"\n    n: \"Number of lines to log to stderr\"\n  }\n  call log {\n    input:\n      exitCode = exitCode,\n      n = n\n  }\n  output {   Pair[File, Map[String, String]] stdout = (log.stdout, {\"vidarr_label\": \"stdout\"})\n   Pair[File, Map[String, String]] stderr = (log.stderr, {\"vidarr_label\": \"stderr\"})}\n  meta {\n    author: \"Jenniffer Meng\"\n    email: \"jenniffer.meng@oicr.on.ca\"\n    description: \"Workflow for testing infrastructure\"\n    dependencies: []\n    output_meta: {\n      stdout: {\n                description: \"stdout lines produced\",\n                vidarr_label: \"stdout\"\n              },\n      stderr: {\n                description: \"stderr lines produced\",\n                vidarr_label: \"stderr\"\n              }\n    }\n  }\n}\n\ntask log {\n  input {\n    Int exitCode\n    Int n\n    Int mem = 1\n    Int runtime_seconds = 60\n    Int timeout = 1\n  }\n  command <<<\n    set -euo pipefail\n    # Output n lines to stderr\n    for (( i = 1; i <= ~{n}; i++ )) ; do\n      echo \"This is a place holder stdout line ${i}\"\n      echo \"This is a place holder stderr line ${i}\" 1>&2\n    done\n    sleep ~{runtime_seconds}\n    exit ~{exitCode}\n  >>>\n  runtime {\n    memory: \"~{mem} GB\"\n    timeout: \"~{timeout}\"\n    maxRetries: 1\n  }\n  output {\n    File stdout = stdout()\n    File stderr = stderr()\n  }\n  parameter_meta {\n    exitCode: \"Integer used to fail as appropriate\"\n    n: \"Number of lines to log to stderr\"\n    mem: \"Memory (in GB) to allocate to the job\"\n    runtime_seconds: \"The amount of time (in seconds) to simulate processing/sleep for\"\n    timeout: \"Maximum amount of time (in hours) the task can run for\"\n  }\n  meta {\n    output_meta: {\n      stdout: \"stdout lines produced\",\n      stderr: \"stderr lines produced\"\n    }\n  }\n}\n"
}